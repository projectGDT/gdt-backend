generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Player {
  id Int @id @default(autoincrement())
  qid Int @unique
  username String @unique
  pwFormatted Bytes

  profiles Profile[]

  ownedServers Server[] @relation("owning")
  involvedServers PlayersInServers[] @relation("involving")

  isSiteAdmin Boolean
}

model Server {
  id Int @id @default(autoincrement())
  groupId Int
  name String
  logoLink String
  coverLink String
  introduction String

  owner Player @relation("owning", fields: [ownerId], references: [id], onDelete: NoAction)
  players PlayersInServers[] @relation("involving")

  applyingPolicy ApplyingPolicy

  ownerId Int
}

enum ApplyingPolicy {
  CLOSED
  ALL_OPEN
  BY_FORM
}

model PlayersInServers {
  player Player @relation("involving", fields: [playerId], references: [id], onDelete: Cascade)
  server Server @relation("involving", fields: [serverId], references: [id], onDelete: Cascade)

  playerId Int
  serverId Int
  @@id([playerId, serverId])

  isOperator Boolean
}

model Profile {
  uniqueIdProvider Int
  // Microsoft: -1; LittleSkin: -2; Xbox: -3;
  // Offline: matching serverId

  uniqueId String
  // Microsoft & LittleSkin: UUID
  // Xbox: XUID as String
  // Offline: playerName

  @@id([uniqueIdProvider, uniqueId])

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int

  @@unique([playerId, uniqueIdProvider])

  cachedPlayerName String
  // Microsoft & LittleSkin & Offline: playerName
  // Xbox: Xbox Gamer Tag
}

model JavaRemote {
  serverId Int @id
  address String
  port Int
  coreVersion String
  compatibleVersions String
  uniqueIdProvider Int // defined above

  isModded Boolean

  // The resource pack is expected be provided directly by the server.
}

model BedrockRemote {
  serverId Int @id
  address String
  port Int
  coreVersion String
  compatibleVersions String

  // The resource packs and add-ons are expected be provided directly by the server.
}

model ApplyingSession {
  id Int @id
  playerId Int
  serverId Int
  payload Json
  submittedAt DateTime
  state SessionState
  handledBy Int @default(-1) // Initially the session is unhandled
}

enum SessionState {
  REVIEWING
  ACCEPTED
  REJECTED
  FINISHED // After the player joins the QQ group
}

model PreRegisteredPlayer {
  passkey String @id
  qid BigInt
  username String @unique
  pwFormatted Bytes
  expiresAt DateTime
  invitorServerId Int // no invitor: -1
}

model InvitationCode {
  serverId Int
  value String @id
  issuedBy Int
  expiresAt DateTime
  reuseableTimes Int // infinite times: -1
}