generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Player {
  id Int @id @default(autoincrement())

  qid Int @unique

  username String @unique
  // unique alias only for login

  pwDigested Bytes
  // password, digested using PBKDF2.

  profiles Profile[]

  ownedServers Server[] @relation("owning")

  involvedServers PlayerInServer[] @relation("involving")

  isSiteAdmin Boolean
}

model Server {
  id Int @id @default(autoincrement())

  groupId Int

  name String

  logoLink String

  coverLink String

  introduction String

  owner Player @relation("owning", fields: [ownerId], references: [id], onDelete: NoAction)
  ownerId Int

  players PlayerInServer[] @relation("involving")

  javaRemote JavaRemote?

  bedrockRemote BedrockRemote?

  applyingPolicy ApplyingPolicy
}

enum ApplyingPolicy {
  CLOSED
  ALL_OPEN
  BY_FORM
}

model PlayerInServer {
  player Player @relation("involving", fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int

  server Server @relation("involving", fields: [serverId], references: [id], onDelete: Cascade)
  serverId Int

  @@id([playerId, serverId])

  isOperator Boolean
  // whether the player OPERATES the server
}

model Profile {
  uniqueIdProvider Int
  // Microsoft: -1; LittleSkin: -2; Xbox: -3;
  // Offline: matching serverId

  uniqueId String
  // Microsoft & LittleSkin: UUID
  // Xbox: XUID as String
  // Offline: playerName

  @@id([uniqueIdProvider, uniqueId])

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int

  @@unique([playerId, uniqueIdProvider])

  cachedPlayerName String
  // Microsoft & LittleSkin & Offline: playerName
  // Xbox: Xbox Gamer Tag
}

model JavaRemote {
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId Int @id

  address String

  port Int

  coreVersion String

  compatibleVersions Json
  // an array, whose items are strings and two-item arrays.
  // 1) string: a single version.
  // 2) array: a range of versions (min and max, inclusive).
  // example:
  // ["1.19", "1.20", ["1.20.2", "1.20.4"]]

  uniqueIdProvider Int

  isModded Boolean
  // whether the server is modded
  // The resource pack is expected be provided directly by the server.
}

model BedrockRemote {
  server Server @relation(fields: [serverId], references: [id])
  serverId Int @id

  address String

  port Int

  coreVersion String

  compatibleVersions String

  // the uniqueIdProvier of BedrockRemote is fixed to -3 (Xbox Live).

  // The resource packs and add-ons are expected be provided directly by the server.
}

model ApplyingSession {
  id Int @id
  // ApplyingSessions are deferredly loaded, so no @relation annotations are used.

  playerId Int

  serverId Int

  payload Json

  submittedAt DateTime

  state SessionState

  handledBy Int @default(-1)
  // Initially the session is unhandled
}

enum SessionState {
  REVIEWING
  ACCEPTED
  REJECTED
  FINISHED // After the player joins the QQ group
}

model PreRegisteredPlayer {
  passkey String @id
  // a UUID

  qid Int

  username String @unique

  pwDigested Bytes

  expiresAt Int

  invitationCode String
}

model InvitationCode {
  serverId Int

  value String @id
  // a UUID

  issuedBy Int

  expiresAt Int

  reuseableTimes Int // infinite times: -1
}